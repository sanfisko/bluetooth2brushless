#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BT13 –ø—É–ª—å—Ç—É
–°–∏–º—É–ª–∏—Ä—É–µ—Ç HID –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ESP32

–ê–≤—Ç–æ—Ä: OpenHands
–î–∞—Ç–∞: 2025-06-06
"""

import bluetooth
import time
import sys

# MAC –∞–¥—Ä–µ—Å –ø—É–ª—å—Ç–∞ BT13
BT13_MAC = "8B:EB:75:4E:65:97"

# HID –∫–æ–¥—ã –∫–Ω–æ–ø–æ–∫ (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞ Ubuntu)
HID_CODES = {
    'VOLUME_UP': 0xE9,
    'VOLUME_DOWN': 0xEA, 
    'PLAY_PAUSE': 0xCD,
    'NEXT_SONG': 0xB5,
    'PREV_SONG': 0xB6
}

def scan_for_bt13():
    """–ü–æ–∏—Å–∫ –ø—É–ª—å—Ç–∞ BT13"""
    print("üîç –ü–æ–∏—Å–∫ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
    
    try:
        devices = bluetooth.discover_devices(duration=10, lookup_names=True)
        
        for addr, name in devices:
            print(f"–ù–∞–π–¥–µ–Ω–æ: {name} ({addr})")
            if addr.upper() == BT13_MAC.upper():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω BT13: {name} ({addr})")
                return True
                
        print(f"‚ùå BT13 ({BT13_MAC}) –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return False

def test_bt13_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BT13"""
    print(f"üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BT13 ({BT13_MAC})...")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ HID –ø—Ä–æ—Ç–æ–∫–æ–ª—É
        sock = bluetooth.BluetoothSocket(bluetooth.L2CAP)
        sock.connect((BT13_MAC, 17))  # HID Control channel
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ BT13 —É—Å–ø–µ—à–Ω–æ!")
        sock.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def simulate_hid_commands():
    """–°–∏–º—É–ª—è—Ü–∏—è HID –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéÆ –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥ –ø—É–ª—å—Ç–∞ BT13...")
    
    commands = [
        ("–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏", HID_CODES['VOLUME_UP']),
        ("–£–º–µ–Ω—å—à–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏", HID_CODES['VOLUME_DOWN']),
        ("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ/–ü–∞—É–∑–∞", HID_CODES['PLAY_PAUSE'])
    ]
    
    for name, code in commands:
        print(f"üì§ {name} (0x{code:02X})")
        time.sleep(1)

def check_bluetooth_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Bluetooth"""
    print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Bluetooth...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Bluetooth –∞–¥–∞–ø—Ç–µ—Ä–∞
        devices = bluetooth.discover_devices(duration=1)
        print("‚úÖ Bluetooth –∞–¥–∞–ø—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Bluetooth: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   sudo systemctl restart bluetooth")
        print("   sudo hciconfig hci0 up")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 50)
    print("üß™ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ü–£–õ–¨–¢–£ BT13")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Bluetooth
    if not check_bluetooth_status():
        sys.exit(1)
    
    print()
    
    # 2. –ü–æ–∏—Å–∫ BT13
    if not scan_for_bt13():
        print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("   - BT13 –≤–∫–ª—é—á–µ–Ω")
        print("   - BT13 –≤ —Ä–µ–∂–∏–º–µ —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è")
        print("   - BT13 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –¥—Ä—É–≥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º")
        sys.exit(1)
    
    print()
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    test_bt13_connection()
    
    print()
    
    # 4. –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥
    simulate_hid_commands()
    
    print()
    print("=" * 50)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 50)
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ESP32:")
    print(f"   MAC –∞–¥—Ä–µ—Å BT13: {BT13_MAC}")
    print("   –ö–æ–¥—ã –∫–Ω–æ–ø–æ–∫:")
    for name, code in HID_CODES.items():
        print(f"     {name}: 0x{code:02X}")
    
    print("\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ü—Ä–æ—à–µ–π—Ç–µ ESP32 –Ω–æ–≤—ã–º –∫–æ–¥–æ–º")
    print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ BT13 –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ESP32 –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)