# Управление бесщеточным двигателем постоянного тока с ESP32 и Bluetooth-пультом

Этот проект демонстрирует, как управлять бесщеточным двигателем постоянного тока с помощью ESP32 и трехкнопочного Bluetooth-пульта (BT13). Двигатель подключен к контроллеру, который поддерживает управление скоростью через потенциометр и управление направлением через двухпозиционный переключатель. ESP32 принимает команды от пульта BT13 по Bluetooth и управляет двигателем, имитируя потенциометр (с помощью PWM) и переключатель (с помощью GPIO-пина).

## Возможности
- Управление скоростью двигателя с помощью кнопок увеличения/уменьшения громкости на пульте BT13.
- Переключение направления двигателя (вперед/назад) с помощью кнопки воспроизведение/пауза.
- Использование Bluetooth-возможностей ESP32 для общения с пультом BT13.
- Имитация потенциометра с помощью PWM для управления скоростью.
- Имитация двухпозиционного переключателя с помощью GPIO-пина для управления направлением.

## Требования к оборудованию
- ESP32 (например, ESP32 DevKit V1)
- Бесщеточный двигатель постоянного тока с контроллером (DC 12-36V, макс. 15A, 500W)
- Bluetooth-пульт BT13 (три кнопки: Увеличение громкости/Предыдущий трек, Воспроизведение/Пауза/Включение, Уменьшение громкости/Следующий трек)
- Источник питания (DC 12-36V для контроллера двигателя, 3.3V/5V для ESP32)
- Переходные провода и макетная плата (по желанию)

## Подключение
1. **Контроллер двигателя**:
   - Подключите двигатель к пинам MA, MB, MC контроллера.
   - Подключите источник питания (DC 12-36V) к входу питания контроллера (положительный и отрицательный).
   - Пины управления скоростью контроллера (5V, GND, сигнал) будут подключены к ESP32 (пин сигнала заменен на выход PWM ESP32).
   - Пины управления направлением контроллера будут подключены к GPIO-пину ESP32 (заменяя двухпозиционный переключатель).

2. **Подключения ESP32**:
   - GPIO 25: Выход PWM для управления скоростью (подключите к пину сигнала скорости контроллера).
   - GPIO 26: Управление направлением (подключите к пину направления контроллера; HIGH для вперед, LOW для назад).
   - Общий GND между ESP32 и контроллером двигателя.
   - Питайте ESP32 от 3.3V или 5V (в зависимости от вашей платы).

## Настройка программного обеспечения
1. Установите Arduino IDE.
2. Установите пакет плат ESP32 в Arduino IDE:
   - Перейдите в `Файл > Настройки`, добавьте `https://espressif.github.io/arduino-esp32/package_esp32_index.json` в поле "Дополнительные URL менеджеров плат".
   - Перейдите в `Инструменты > Платы > Менеджер плат`, найдите "ESP32" и установите пакет ESP32 от Espressif.
3. Загрузите приведенный ниже код в Arduino IDE.
4. Выберите вашу плату ESP32 (например, `ESP32 Dev Module`) в `Инструменты > Плата`.
5. Загрузите код на вашу ESP32.

## Код
```cpp
#include <BluetoothSerial.h>

BluetoothSerial SerialBT;

// Определение пинов
const int speedPin = 25;  // Пин PWM для управления скоростью
const int directionPin = 26;  // GPIO-пин для управления направлением

// Настройки PWM
const int freq = 1000;  // Частота PWM (1кГц)
const int pwmChannel = 0;  // Канал PWM
const int resolution = 8;  // Разрешение 8 бит (0-255)

// Переменные управления двигателем
int speed = 0;  // Скорость двигателя (0-255)
bool forward = true;  // Направление двигателя (true = вперед, false = назад)

void setup() {
  // Инициализация серийного порта для отладки
  Serial.begin(115200);

  // Инициализация Bluetooth
  SerialBT.begin("ESP32_Motor_Control");  // Имя Bluetooth-устройства
  Serial.println("Bluetooth-устройство запущено, ожидание сопряжения...");

  // Настройка PWM для управления скоростью
  ledcSetup(pwmChannel, freq, resolution);
  ledcAttachPin(speedPin, pwmChannel);
  ledcWrite(pwmChannel, speed);

  // Настройка пина направления
  pinMode(directionPin, OUTPUT);
  digitalWrite(directionPin, forward ? HIGH : LOW);
}

void loop() {
  // Проверка наличия данных Bluetooth
  if (SerialBT.available()) {
    char command = SerialBT.read();
    Serial.print("Получено: ");
    Serial.println(command);

    // Обработка команд от пульта BT13
    switch (command) {
      case '+':  // Увеличение громкости (увеличение скорости)
        speed = min(speed + 10, 255);  // Увеличение скорости на 10, максимум 255
        ledcWrite(pwmChannel, speed);
        Serial.print("Скорость: ");
        Serial.println(speed);
        break;

      case '-':  // Уменьшение громкости (уменьшение скорости)
        speed = max(speed - 10, 0);  // Уменьшение скорости на 10, минимум 0
        ledcWrite(pwmChannel, speed);
        Serial.print("Скорость: ");
        Serial.println(speed);
        break;

      case 'P':  // Воспроизведение/Пауза (переключение направления)
        forward = !forward;
        digitalWrite(directionPin, forward ? HIGH : LOW);
        Serial.print("Направление: ");
        Serial.println(forward ? "Вперед" : "Назад");
        break;

      default:
        Serial.println("Неизвестная команда");
        break;
    }
  }
  delay(20);
}
```

## Использование
1. Включите ESP32 и контроллер двигателя.
2. На телефоне или устройстве выполните сопряжение с Bluetooth-устройством под названием "ESP32_Motor_Control".
3. Используйте пульт BT13 для управления двигателем:
   - **Увеличение громкости/Предыдущий трек**: Увеличение скорости двигателя.
   - **Уменьшение громкости/Следующий трек**: Уменьшение скорости двигателя.
   - **Воспроизведение/Пауза/Включение**: Переключение направления двигателя (вперед/назад).
4. Отслеживайте вывод отладки в Мониторе порта в Arduino IDE (на скорости 115200 бод).

## Примечания
- Пульт BT13 отправляет определенные символы по Bluetooth (например, `+` для увеличения громкости, `-` для уменьшения громкости, `P` для воспроизведения/паузы). Эти символы могут отличаться в зависимости от пульта; при необходимости измените код.
- Убедитесь, что ESP32 и контроллер двигателя имеют общий GND, чтобы избежать проблем с напряжением.
- Частота PWM (1кГц) и разрешение (8 бит) выбраны для совместимости с большинством контроллеров двигателя. При необходимости отрегулируйте.
- Контроллер двигателя поддерживает сигналы PWM 10-50кГц для управления скоростью, что совместимо с выходом PWM ESP32.

## Структура проекта

```
bluetooth2brushless/
├── bluetooth2brushless.ino    # Основной код Arduino
├── README.markdown           # Этот файл
├── INSTALLATION.md          # Инструкция по установке
├── EXAMPLES.md             # Примеры использования и расширения
├── SPECIFICATIONS.md       # Технические характеристики
├── FAQ.md                 # Часто задаваемые вопросы
├── CHANGELOG.md          # История изменений
├── LICENSE              # Лицензия MIT
├── wiring_diagram.txt  # Схема подключения
├── arduino_config.txt # Настройки Arduino IDE
└── test_commands.py  # Утилита тестирования (Python)
```

## Быстрый старт

1. **Установка**: Следуйте инструкциям в [INSTALLATION.md](INSTALLATION.md)
2. **Подключение**: Используйте схему из [wiring_diagram.txt](wiring_diagram.txt)
3. **Настройка**: Конфигурация Arduino IDE в [arduino_config.txt](arduino_config.txt)
4. **Загрузка**: Откройте `bluetooth2brushless.ino` и загрузите на ESP32
5. **Тестирование**: Используйте [test_commands.py](test_commands.py) или Bluetooth терминал

## Дополнительная документация

- 📋 [Технические характеристики](SPECIFICATIONS.md) - Подробные спецификации системы
- 🔧 [Примеры и расширения](EXAMPLES.md) - Дополнительные возможности и модификации
- ❓ [Часто задаваемые вопросы](FAQ.md) - Решения типичных проблем
- 📝 [История изменений](CHANGELOG.md) - Версии и обновления
- ⚙️ [Настройка Arduino IDE](arduino_config.txt) - Детальная конфигурация
- 🔌 [Схема подключения](wiring_diagram.txt) - Визуальная схема соединений

## Поддержка

Если у вас возникли проблемы:
1. Проверьте [FAQ.md](FAQ.md) для решения типичных проблем
2. Убедитесь, что следуете инструкциям из [INSTALLATION.md](INSTALLATION.md)
3. Создайте Issue в репозитории с подробным описанием проблемы

## Участие в разработке

Мы приветствуем вклад в развитие проекта! Пожалуйста:
1. Сделайте Fork репозитория
2. Создайте ветку для ваших изменений
3. Внесите изменения и протестируйте их
4. Создайте Pull Request с описанием изменений

## Лицензия

Этот проект лицензирован по лицензии MIT - см. файл [LICENSE](LICENSE) для деталей.