#!/bin/bash

# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ESP-IDF –≤–µ—Ä—Å–∏–∏ bluetooth2brushless
# –ê–≤—Ç–æ—Ä: OpenHands
# –î–∞—Ç–∞: 2025-06-09

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "üöó =============================================="
    echo "   ESP32 BT13 Motor Control - ESP-IDF –≤–µ—Ä—Å–∏—è"
    echo "=============================================="
    echo -e "${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_system_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    local missing_deps=()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ git
    if ! command -v git &> /dev/null; then
        missing_deps+=("git")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ python3
    if ! command -v python3 &> /dev/null; then
        missing_deps+=("python3")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ curl
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
    if ! command -v pip3 &> /dev/null && ! python3 -m pip --version &> /dev/null; then
        missing_deps+=("python3-pip")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}"
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:"
        echo ""
        echo "Ubuntu/Debian:"
        echo "  sudo apt update && sudo apt install ${missing_deps[*]}"
        echo ""
        echo "CentOS/RHEL/Fedora:"
        echo "  sudo yum install ${missing_deps[*]} (–∏–ª–∏ dnf –≤–º–µ—Å—Ç–æ yum)"
        echo ""
        echo "macOS:"
        echo "  brew install ${missing_deps[*]}"
        echo ""
        exit 1
    else
        print_success "–í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ESP-IDF
install_esp_idf() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ESP-IDF..."
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    local original_dir=$(pwd)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    ESP_DIR="$HOME/esp"
    mkdir -p "$ESP_DIR"
    cd "$ESP_DIR"
    
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ESP-IDF
    print_info "–ó–∞–≥—Ä—É–∑–∫–∞ ESP-IDF (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)..."
    if git clone --recursive https://github.com/espressif/esp-idf.git; then
        print_success "ESP-IDF –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ESP-IDF"
        cd "$original_dir"
        exit 1
    fi
    
    cd esp-idf
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ESP-IDF..."
    if ./install.sh esp32; then
        print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
        cd "$original_dir"
        exit 1
    fi
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print_info "–ê–∫—Ç–∏–≤–∞—Ü–∏—è ESP-IDF –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    source ./export.sh
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd "$original_dir"
    
    print_success "ESP-IDF —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ESP-IDF
check_esp_idf_updates() {
    local esp_idf_path="$1"
    
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ESP-IDF..."
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    local original_dir=$(pwd)
    
    cd "$(dirname "$esp_idf_path")"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
    local current_commit=$(git rev-parse HEAD)
    git fetch origin >/dev/null 2>&1
    local latest_commit=$(git rev-parse origin/master)
    
    if [ "$current_commit" != "$latest_commit" ]; then
        print_warning "–î–æ—Å—Ç—É–ø–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ESP-IDF"
        echo ""
        read -p "–û–±–Ω–æ–≤–∏—Ç—å ESP-IDF –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏? (y/n): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ESP-IDF..."
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
            git stash >/dev/null 2>&1
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if git pull origin master && git submodule update --init --recursive; then
                print_success "ESP-IDF –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                
                # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
                ./install.sh esp32
                
                cd "$original_dir"
                return 0
            else
                print_error "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ESP-IDF"
                cd "$original_dir"
                return 1
            fi
        else
            print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ"
        fi
    else
        print_success "ESP-IDF —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"
    fi
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd "$original_dir"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ESP-IDF –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_esp_idf() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ ESP-IDF –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ESP-IDF –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    ESP_IDF_PATHS=(
        "$HOME/esp/esp-idf/export.sh"
        "$HOME/.espressif/esp-idf/export.sh"
        "/opt/esp-idf/export.sh"
    )
    
    ESP_IDF_FOUND=false
    ESP_IDF_PATH=""
    
    for path in "${ESP_IDF_PATHS[@]}"; do
        if [ -f "$path" ]; then
            ESP_IDF_PATH="$path"
            ESP_IDF_FOUND=true
            break
        fi
    done
    
    if [ "$ESP_IDF_FOUND" = false ]; then
        print_warning "ESP-IDF –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
        echo ""
        read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ESP-IDF –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            install_esp_idf
        else
            print_error "ESP-IDF –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞"
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ESP-IDF –≤—Ä—É—á–Ω—É—é:"
            echo "  mkdir -p ~/esp && cd ~/esp"
            echo "  git clone --recursive https://github.com/espressif/esp-idf.git"
            echo "  cd esp-idf && ./install.sh esp32 && . ./export.sh"
            exit 1
        fi
    else
        print_success "–ù–∞–π–¥–µ–Ω ESP-IDF: $ESP_IDF_PATH"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        check_esp_idf_updates "$ESP_IDF_PATH"
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if [ -z "$IDF_PATH" ]; then
            print_info "–ê–∫—Ç–∏–≤–∞—Ü–∏—è ESP-IDF –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
            source "$ESP_IDF_PATH"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ ESP-IDF
    if command -v idf.py &> /dev/null; then
        IDF_VERSION=$(idf.py --version 2>&1 | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+")
        print_success "ESP-IDF –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: $IDF_VERSION"
    else
        print_error "idf.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É ESP-IDF"
        exit 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ ESP32
set_target() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ ESP32..."
    if idf.py set-target esp32; then
        print_success "–¶–µ–ª—å ESP32 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else
        print_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏ ESP32"
        exit 1
    fi
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
build_project() {
    print_info "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    print_info "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Å–±–æ—Ä–∫–µ..."
    
    if idf.py build; then
        print_success "–ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
        return 0
    else
        print_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞!"
        print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã"
        exit 1
    fi
}

# –ü—Ä–æ—à–∏–≤–∫–∞ ESP32
flash_esp32() {
    local port="$1"
    local baud_rate="${2:-460800}"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 460800, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥—Ä—É–≥—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
    
    print_info "–ü—Ä–æ—à–∏–≤–∫–∞ ESP32 —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç $port (—Å–∫–æ—Ä–æ—Å—Ç—å: $baud_rate)..."
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
    if idf.py -p "$port" -b "$baud_rate" flash; then
        print_success "–ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
        return 0
    else
        print_warning "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ—à–∏–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±..."
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ—à–∏–≤–∫–∏ —á–µ—Ä–µ–∑ esptool –Ω–∞–ø—Ä—è–º—É—é
        if [ -f "build/bootloader/bootloader.bin" ] && [ -f "build/bt13_motor_control.bin" ] && [ -f "build/partition_table/partition-table.bin" ]; then
            print_info "–ü—Ä–æ—à–∏–≤–∫–∞ —á–µ—Ä–µ–∑ esptool –Ω–∞–ø—Ä—è–º—É—é..."
            if python -m esptool --chip esp32 -p "$port" -b "$baud_rate" --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 2MB 0x1000 build/bootloader/bootloader.bin 0x10000 build/bt13_motor_control.bin 0x8000 build/partition_table/partition-table.bin; then
                print_success "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                return 0
            fi
        fi
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏!"
        print_warning "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
        echo "  - ESP32 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–æ—Ä—Ç—É $port"
        echo "  - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ /dev/ttyUSB1, /dev/ttyACM0)"
        echo "  - ESP32 –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–∑–∞–∂–º–∏—Ç–µ BOOT –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏)"
        echo "  - –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–±–µ–ª–µ–º USB"
        

        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É
        echo ""
        read -p "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ—à–∏—Ç—å –µ—â–µ —Ä–∞–∑? (y/n): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_info "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏..."
            flash_esp32 "$port" "$baud_rate"
        else
            print_warning "–ü—Ä–æ—à–∏–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ—à–∏—Ç—å –≤—Ä—É—á–Ω—É—é:"
            echo "  idf.py -p $port -b $baud_rate flash"
            return 1
        fi
    fi
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ ESP32
detect_port() {
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
    POSSIBLE_PORTS=(
        "/dev/ttyUSB0"
        "/dev/ttyUSB1" 
        "/dev/ttyACM0"
        "/dev/ttyACM1"
        "/dev/cu.usbserial-*"
        "/dev/cu.SLAB_USBtoUART"
    )
    
    for port in "${POSSIBLE_PORTS[@]}"; do
        if ls $port 2>/dev/null >/dev/null; then
            echo "$port"
            return 0
        fi
    done
    
    # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    return 1
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
start_monitor() {
    local port="$1"
    print_success "–ì–æ—Ç–æ–≤–æ! ESP32 –ø—Ä–æ—à–∏—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
    print_info "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ BT13:"
    echo "  1. –ó–∞—Ä—è–¥–∏—Ç–µ BT13"
    echo "  2. –í–∫–ª—é—á–∏—Ç–µ BT13 (–¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Å—Ä–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–∏)"
    echo "  3. ESP32 –Ω–∞–π–¥–µ—Ç BT13 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    echo ""
    print_info "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "  + –∫–æ—Ä–æ—Ç–∫–æ–µ  ‚Üí +1 —É—Ä–æ–≤–µ–Ω—å —Å–∫–æ—Ä–æ—Å—Ç–∏"
    echo "  - –∫–æ—Ä–æ—Ç–∫–æ–µ  ‚Üí -1 —É—Ä–æ–≤–µ–Ω—å —Å–∫–æ—Ä–æ—Å—Ç–∏"
    echo "  + –¥–ª–∏–Ω–Ω–æ–µ   ‚Üí –º–∞–∫—Å–∏–º—É–º –≤–ø–µ—Ä–µ–¥"
    echo "  - –¥–ª–∏–Ω–Ω–æ–µ   ‚Üí –º–∞–∫—Å–∏–º—É–º –Ω–∞–∑–∞–¥"
    echo "  –°—Ä–µ–¥–Ω—è—è     ‚Üí –ø–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo ""
    print_info "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Ctrl+] –¥–ª—è –≤—ã—Ö–æ–¥–∞)..."
    echo ""
    
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    sleep 2
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    idf.py -p "$port" monitor
}

# –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—à–∏–≤–∫–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
get_baud_rate() {
    echo "115200"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ ! -f "main/main.c" ]; then
        print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞!"
        print_info "cd bluetooth2brushless && ./install.sh"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_system_dependencies
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ESP-IDF
    check_esp_idf
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if [ ! -f "sdkconfig" ]; then
        set_target
    else
        print_info "–¶–µ–ª—å ESP32 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    fi
    
    # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    build_project
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
    print_info "–ü–æ–∏—Å–∫ ESP32..."
    ESP_PORT=$(detect_port)
    if [ $? -ne 0 ]; then
        print_warning "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å"
        print_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:"
        ls /dev/tty* 2>/dev/null | grep -E "(USB|ACM|usbserial)" || echo "  –ü–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ó–∞–ø—Ä–æ—Å –ø–æ—Ä—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        echo ""
        read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç ESP32 (–Ω–∞–ø—Ä–∏–º–µ—Ä, /dev/ttyUSB0): " ESP_PORT
        if [ ! -e "$ESP_PORT" ]; then
            print_error "–ü–æ—Ä—Ç $ESP_PORT –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            exit 1
        fi
    else
        print_success "–ù–∞–π–¥–µ–Ω –ø–æ—Ä—Ç: $ESP_PORT"
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ—à–∏–≤–∫–∏
    BAUD_RATE=$(get_baud_rate)
    print_info "–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—à–∏–≤–∫–∏: $BAUD_RATE (–Ω–∞–¥–µ–∂–Ω–∞—è –¥–ª—è –≤—Å–µ—Ö –∫–∞–±–µ–ª–µ–π)"
    
    # –ü—Ä–æ—à–∏–≤–∫–∞
    if flash_esp32 "$ESP_PORT" "$BAUD_RATE"; then
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        start_monitor "$ESP_PORT"
    else
        print_warning "–ü—Ä–æ—à–∏–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        print_info "–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
        echo "  idf.py -p $ESP_PORT monitor"
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
trap 'print_warning "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 1' INT

# –ó–∞–ø—É—Å–∫
main "$@"