#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ESP-IDF –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ bluetooth2brushless
# –ê–≤—Ç–æ—Ä: sanfisko
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/sanfisko/bluetooth2brushless

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ESP_IDF_VERSION="v5.4.1"
ESP_DIR="$HOME/esp"
ESP_IDF_PATH="$ESP_DIR/esp-idf"
PROJECT_DIR="$(pwd)"
FLASH_SPEED="115200"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
print_header() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë              ESP32 BT13 Motor Control Setup                  ‚ïë${NC}"
    echo -e "${BLUE}‚ïë              –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: github.com/sanfisko                ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ESP-IDF
check_esp_idf() {
    if [ -d "$ESP_IDF_PATH" ]; then
        cd "$ESP_IDF_PATH"
        local current_version=$(git describe --tags --exact-match 2>/dev/null || git rev-parse --short HEAD)
        echo -e "${GREEN}‚úÖ ESP-IDF –Ω–∞–π–¥–µ–Ω: $current_version${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        git fetch --tags >/dev/null 2>&1
        if ! git describe --tags --exact-match >/dev/null 2>&1 || [ "$(git describe --tags --exact-match)" != "$ESP_IDF_VERSION" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  –î–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è $ESP_IDF_VERSION${NC}"
            return 1
        else
            echo -e "${GREEN}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è${NC}"
            return 0
        fi
    else
        echo -e "${RED}‚ùå ESP-IDF –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ESP-IDF
install_esp_idf() {
    echo -e "${BLUE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ESP-IDF $ESP_IDF_VERSION...${NC}"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    mkdir -p "$ESP_DIR"
    cd "$ESP_DIR"
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if [ -d "esp-idf" ]; then
        echo -e "${YELLOW}üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏...${NC}"
        rm -rf esp-idf
    fi
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
    echo -e "${BLUE}üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ESP-IDF $ESP_IDF_VERSION...${NC}"
    git clone --recursive --branch $ESP_IDF_VERSION https://github.com/espressif/esp-idf.git
    
    cd esp-idf
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    echo -e "${BLUE}üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...${NC}"
    ./install.sh esp32
    
    echo -e "${GREEN}‚úÖ ESP-IDF $ESP_IDF_VERSION —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ESP-IDF
update_esp_idf() {
    echo -e "${BLUE}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ESP-IDF –¥–æ $ESP_IDF_VERSION...${NC}"
    
    cd "$ESP_IDF_PATH"
    git fetch --tags
    git checkout $ESP_IDF_VERSION
    git submodule update --init --recursive
    
    # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    echo -e "${BLUE}üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...${NC}"
    ./install.sh esp32
    
    echo -e "${GREEN}‚úÖ ESP-IDF –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ $ESP_IDF_VERSION!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
build_project() {
    echo -e "${BLUE}üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
    
    cd "$PROJECT_DIR"
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º ESP-IDF
    source "$ESP_IDF_PATH/export.sh"
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–±–æ—Ä–∫—É
    if [ -d "build" ]; then
        rm -rf build
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –∏ —Å–æ–±–∏—Ä–∞–µ–º
    idf.py set-target esp32
    idf.py build
    
    echo -e "${GREEN}‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—à–∏–≤–∫–∏ ESP32
flash_esp32() {
    echo -e "${BLUE}‚ö° –ü–æ–∏—Å–∫ ESP32...${NC}"
    
    # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã
    local ports=()
    for port in /dev/ttyUSB* /dev/ttyACM* /dev/cu.usbserial* /dev/cu.SLAB_USBtoUART*; do
        if [ -e "$port" ]; then
            ports+=("$port")
        fi
    done
    
    if [ ${#ports[@]} -eq 0 ]; then
        echo -e "${RED}‚ùå ESP32 –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.${NC}"
        return 1
    fi
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Ä—Ç
    local selected_port
    if [ ${#ports[@]} -eq 1 ]; then
        selected_port="${ports[0]}"
        echo -e "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω ESP32 –Ω–∞ –ø–æ—Ä—Ç—É: $selected_port${NC}"
    else
        echo -e "${YELLOW}–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ä—Ç–æ–≤:${NC}"
        for i in "${!ports[@]}"; do
            echo -e "${CYAN}$((i+1))) ${ports[i]}${NC}"
        done
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç (1-${#ports[@]}): " choice
        selected_port="${ports[$((choice-1))]}"
    fi
    
    # –ü—Ä–æ—à–∏–≤–∞–µ–º
    echo -e "${BLUE}‚ö° –ü—Ä–æ—à–∏–≤–∫–∞ ESP32 –Ω–∞ $selected_port —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é $FLASH_SPEED...${NC}"
    cd "$PROJECT_DIR"
    source "$ESP_IDF_PATH/export.sh"
    
    idf.py -p "$selected_port" -b "$FLASH_SPEED" flash
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
        return 0
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏!${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ BT13
monitor_and_check() {
    echo -e "${BLUE}üì∫ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å BT13...${NC}"
    echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Ctrl+] –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∞${NC}"
    echo ""
    
    cd "$PROJECT_DIR"
    source "$ESP_IDF_PATH/export.sh"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –≤ —Ñ–æ–Ω–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥
    timeout 30 idf.py monitor | tee /tmp/esp32_monitor.log &
    local monitor_pid=$!
    
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if grep -q "BT13\|bluetooth\|connected\|ready" /tmp/esp32_monitor.log 2>/dev/null; then
        kill $monitor_pid 2>/dev/null || true
        echo -e "${GREEN}‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å BT13!${NC}"
        return 0
    else
        kill $monitor_pid 2>/dev/null || true
        echo -e "${YELLOW}‚ö†Ô∏è  –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å BT13 –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è ESP-IDF
offer_cleanup() {
    echo ""
    echo -e "${YELLOW}üßπ –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ESP-IDF –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞?${NC}"
    echo -e "${CYAN}ESP-IDF –∑–∞–Ω–∏–º–∞–µ—Ç –æ–∫–æ–ª–æ 2GB –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞${NC}"
    echo ""
    read -p "–£–¥–∞–ª–∏—Ç—å ESP-IDF? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ ESP-IDF...${NC}"
        rm -rf "$ESP_DIR"
        echo -e "${GREEN}‚úÖ ESP-IDF —É–¥–∞–ª–µ–Ω${NC}"
    else
        echo -e "${GREEN}‚úÖ ESP-IDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ $ESP_DIR${NC}"
        echo -e "${BLUE}–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
        echo -e "${YELLOW}source $ESP_IDF_PATH/export.sh${NC}"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ESP-IDF
    if check_esp_idf; then
        echo -e "${GREEN}‚úÖ ESP-IDF –∞–∫—Ç—É–∞–ª–µ–Ω${NC}"
    else
        echo -e "${YELLOW}üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ESP-IDF${NC}"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (Y/n): " -n 1 -r
        echo
        
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            if [ -d "$ESP_IDF_PATH" ]; then
                update_esp_idf
            else
                install_esp_idf
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞${NC}"
            exit 0
        fi
    fi
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    echo ""
    build_project
    
    # –ü—Ä–æ—à–∏–≤–∞–µ–º ESP32
    echo ""
    if flash_esp32; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å BT13
        echo ""
        if monitor_and_check; then
            echo -e "${GREEN}üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
            offer_cleanup
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç –ø—Ä–æ—à–∏—Ç, –Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å BT13 —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏${NC}"
            echo -e "${BLUE}–ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä –≤—Ä—É—á–Ω—É—é: idf.py monitor${NC}"
        fi
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ESP32${NC}"
        exit 1
    fi
    
    echo ""
    echo -e "${GREEN}‚úÖ –ì–æ—Ç–æ–≤–æ!${NC}"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"