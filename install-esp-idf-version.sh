#!/bin/bash

# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ bluetooth2brushless ESP-IDF –≤–µ—Ä—Å–∏–∏
# –°–∫–∞—á–∏–≤–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –ø—Ä–æ—à–∏–≤–∞–µ—Ç ESP32
# 
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   wget https://raw.githubusercontent.com/sanfisko/bluetooth2brushless/main/install-esp-idf-version.sh
#   chmod +x install-esp-idf-version.sh
#   ./install-esp-idf-version.sh
#
# –ê–≤—Ç–æ—Ä: OpenHands
# –î–∞—Ç–∞: 2025-06-09

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_step() {
    echo -e "${PURPLE}üîß $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "üöó =============================================="
    echo "   ESP32 BT13 Motor Control - –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo "=============================================="
    echo -e "${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ git
    if ! command -v git &> /dev/null; then
        print_error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ git:"
        echo "  Ubuntu/Debian: sudo apt install git"
        echo "  macOS: brew install git"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ wget –∏–ª–∏ curl
    if ! command -v wget &> /dev/null && ! command -v curl &> /dev/null; then
        print_error "Wget –∏–ª–∏ curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ wget:"
        echo "  Ubuntu/Debian: sudo apt install wget"
        echo "  macOS: brew install wget"
        exit 1
    fi
    
    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
clone_repository() {
    print_step "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è bluetooth2brushless..."
    
    REPO_DIR="bluetooth2brushless"
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if [ -d "$REPO_DIR" ]; then
        print_warning "–ü–∞–ø–∫–∞ $REPO_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        read -p "–£–¥–∞–ª–∏—Ç—å –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ? (y/n): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -rf "$REPO_DIR"
            print_info "–°—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
        else
            print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É"
            cd "$REPO_DIR"
            git pull origin main
            cd ..
            return 0
        fi
    fi
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    if git clone https://github.com/sanfisko/bluetooth2brushless.git; then
        print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ESP-IDF –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_esp_idf() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ ESP-IDF –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ -z "$IDF_PATH" ]; then
        print_warning "ESP-IDF –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
        print_info "–ü–æ–∏—Å–∫ ESP-IDF –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è—Ö..."
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ESP-IDF –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        ESP_IDF_PATHS=(
            "$HOME/esp/esp-idf/export.sh"
            "$HOME/.espressif/esp-idf/export.sh"
            "/opt/esp-idf/export.sh"
        )
        
        ESP_IDF_FOUND=false
        for path in "${ESP_IDF_PATHS[@]}"; do
            if [ -f "$path" ]; then
                print_success "–ù–∞–π–¥–µ–Ω ESP-IDF: $path"
                print_info "–ê–∫—Ç–∏–≤–∞—Ü–∏—è ESP-IDF –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
                source "$path"
                ESP_IDF_FOUND=true
                break
            fi
        done
        
        if [ "$ESP_IDF_FOUND" = false ]; then
            print_error "ESP-IDF –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            print_warning "ESP-IDF –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ESP-IDF:"
            echo ""
            echo "  mkdir -p ~/esp && cd ~/esp"
            echo "  git clone --recursive https://github.com/espressif/esp-idf.git"
            echo "  cd esp-idf && ./install.sh esp32 && . ./export.sh"
            echo ""
            print_info "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ESP-IDF –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
            exit 1
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ ESP-IDF
    if command -v idf.py &> /dev/null; then
        IDF_VERSION=$(idf.py --version 2>&1 | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+")
        print_success "ESP-IDF –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: $IDF_VERSION"
    else
        print_error "idf.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É ESP-IDF"
        exit 1
    fi
}

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
enter_project() {
    print_step "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞..."
    
    if [ ! -d "bluetooth2brushless/esp-idf-version" ]; then
        print_error "–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        exit 1
    fi
    
    cd bluetooth2brushless/esp-idf-version
    print_success "–ü–µ—Ä–µ—à–ª–∏ –≤ –ø–∞–ø–∫—É esp-idf-version"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ ESP32
set_target() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ ESP32..."
    if idf.py set-target esp32; then
        print_success "–¶–µ–ª—å ESP32 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else
        print_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏ ESP32"
        exit 1
    fi
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
build_project() {
    print_step "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    print_info "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Å–±–æ—Ä–∫–µ..."
    
    if idf.py build; then
        print_success "–ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
        return 0
    else
        print_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞!"
        print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã"
        exit 1
    fi
}

# –ü—Ä–æ—à–∏–≤–∫–∞ ESP32
flash_esp32() {
    local port="$1"
    print_step "–ü—Ä–æ—à–∏–≤–∫–∞ ESP32 —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç $port..."
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏
    if idf.py -p "$port" flash; then
        print_success "–ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
        return 0
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏!"
        print_warning "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
        echo "  - ESP32 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–æ—Ä—Ç—É $port"
        echo "  - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ /dev/ttyUSB1, /dev/ttyACM0)"
        echo "  - ESP32 –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–∑–∞–∂–º–∏—Ç–µ BOOT –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏)"
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É
        echo ""
        read -p "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ—à–∏—Ç—å –µ—â–µ —Ä–∞–∑? (y/n): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_info "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏..."
            flash_esp32 "$port"
        else
            print_warning "–ü—Ä–æ—à–∏–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ—à–∏—Ç—å –≤—Ä—É—á–Ω—É—é:"
            echo "  idf.py -p $port flash"
            return 1
        fi
    fi
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ ESP32
detect_port() {
    print_step "–ü–æ–∏—Å–∫ ESP32..."
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
    POSSIBLE_PORTS=(
        "/dev/ttyUSB0"
        "/dev/ttyUSB1" 
        "/dev/ttyACM0"
        "/dev/ttyACM1"
        "/dev/cu.usbserial-*"
        "/dev/cu.SLAB_USBtoUART"
    )
    
    for port in "${POSSIBLE_PORTS[@]}"; do
        if ls $port 2>/dev/null; then
            print_success "–ù–∞–π–¥–µ–Ω –ø–æ—Ä—Ç: $port"
            echo "$port"
            return 0
        fi
    done
    
    print_warning "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å"
    print_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:"
    ls /dev/tty* 2>/dev/null | grep -E "(USB|ACM|usbserial)" || echo "  –ü–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ—Ä—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç ESP32 (–Ω–∞–ø—Ä–∏–º–µ—Ä, /dev/ttyUSB0): " user_port
    if [ -e "$user_port" ]; then
        echo "$user_port"
        return 0
    else
        print_error "–ü–æ—Ä—Ç $user_port –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return 1
    fi
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
start_monitor() {
    local port="$1"
    print_success "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ESP32 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
    echo ""
    print_info "üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–æ–≤:"
    echo "  ESP32 GPIO 25 ‚Üí ESC PWM –≤—Ö–æ–¥"
    echo "  ESP32 GPIO 26 ‚Üí ESC —Ä–µ–≤–µ—Ä—Å"
    echo "  ESP32 GND     ‚Üí ESC GND"
    echo ""
    print_info "üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ BT13:"
    echo "  1. –ó–∞—Ä—è–¥–∏—Ç–µ BT13"
    echo "  2. –í–∫–ª—é—á–∏—Ç–µ BT13 (–¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Å—Ä–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–∏)"
    echo "  3. ESP32 –Ω–∞–π–¥–µ—Ç BT13 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (MAC: 8B:EB:75:4E:65:97)"
    echo ""
    print_info "üïπÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "  + –∫–æ—Ä–æ—Ç–∫–æ–µ  ‚Üí +1 —É—Ä–æ–≤–µ–Ω—å —Å–∫–æ—Ä–æ—Å—Ç–∏"
    echo "  - –∫–æ—Ä–æ—Ç–∫–æ–µ  ‚Üí -1 —É—Ä–æ–≤–µ–Ω—å —Å–∫–æ—Ä–æ—Å—Ç–∏"
    echo "  + –¥–ª–∏–Ω–Ω–æ–µ   ‚Üí –º–∞–∫—Å–∏–º—É–º –≤–ø–µ—Ä–µ–¥"
    echo "  - –¥–ª–∏–Ω–Ω–æ–µ   ‚Üí –º–∞–∫—Å–∏–º—É–º –Ω–∞–∑–∞–¥"
    echo "  –°—Ä–µ–¥–Ω—è—è     ‚Üí –ø–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo ""
    print_info "üìä –û–∂–∏–¥–∞–µ–º—ã–µ –ª–æ–≥–∏:"
    echo "  'BT13 –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!'"
    echo "  'HID –¥–∞–Ω–Ω—ã–µ (2 –±–∞–π—Ç): 04 00'"
    echo "  '–ö–æ–º–∞–Ω–¥–∞: –ö–æ—Ä–æ—Ç–∫–æ–µ + (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è)'"
    echo "  '–†–∞–±–æ—Ç–∞–µ—Ç –≤–ø–µ—Ä–µ–¥ –Ω–∞ 10%'"
    echo ""
    print_info "üñ•Ô∏è  –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Ctrl+] –¥–ª—è –≤—ã—Ö–æ–¥–∞)..."
    echo ""
    
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    sleep 3
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    idf.py -p "$port" monitor
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
show_usage() {
    echo "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ bluetooth2brushless ESP-IDF –≤–µ—Ä—Å–∏–∏"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "  wget https://raw.githubusercontent.com/sanfisko/bluetooth2brushless/main/install-esp-idf-version.sh"
    echo "  chmod +x install-esp-idf-version.sh"
    echo "  ./install-esp-idf-version.sh"
    echo ""
    echo "–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:"
    echo "  ‚úÖ –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    echo "  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç ESP-IDF"
    echo "  ‚úÖ –°–æ–±–µ—Ä–µ—Ç –ø—Ä–æ–µ–∫—Ç"
    echo "  ‚úÖ –ù–∞–π–¥–µ—Ç ESP32"
    echo "  ‚úÖ –ü—Ä–æ—à—å–µ—Ç ESP32"
    echo "  ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        show_usage
        exit 0
    fi
    
    print_header
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies
    
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    clone_repository
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ESP-IDF
    check_esp_idf
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    enter_project
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if [ ! -f "sdkconfig" ]; then
        set_target
    else
        print_info "–¶–µ–ª—å ESP32 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    fi
    
    # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    build_project
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
    ESP_PORT=$(detect_port)
    if [ $? -ne 0 ]; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—Ç ESP32"
        print_info "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ ESP32 –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
        exit 1
    fi
    
    # –ü—Ä–æ—à–∏–≤–∫–∞
    if flash_esp32 "$ESP_PORT"; then
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        start_monitor "$ESP_PORT"
    else
        print_warning "–ü—Ä–æ—à–∏–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        print_info "–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
        echo "  cd bluetooth2brushless/esp-idf-version"
        echo "  idf.py -p $ESP_PORT monitor"
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
trap 'print_warning "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 1' INT

# –ó–∞–ø—É—Å–∫
main "$@"